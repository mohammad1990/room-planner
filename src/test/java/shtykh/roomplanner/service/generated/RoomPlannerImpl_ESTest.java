/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 07 13:33:26 GMT 2018
 */

package shtykh.roomplanner.service.generated;

import ch.qos.logback.classic.Level;
import org.junit.Test;
import shtykh.roomplanner.model.RoomLevel;
import shtykh.roomplanner.model.RoomPlan;
import shtykh.roomplanner.service.RoomPlanner;
import shtykh.roomplanner.service.impl.RoomPlannerTests;
import shtykh.roomplanner.service.impl.RoomStateServiceImpl;

import java.util.*;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class RoomPlannerImpl_ESTest extends RoomPlannerTests {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RoomStateServiceImpl roomStateServiceImpl0 = new RoomStateServiceImpl();
        RoomPlanner roomPlannerImpl0 = getPlannerService();
        Stack<Integer> stack0 = new Stack<>();
        Integer integer0 = Level.INFO_INTEGER;
        Hashtable<RoomLevel, Integer> hashtable0 = new Hashtable<>();
        RoomLevel roomLevel0 = RoomLevel.ECONOMY;
        Integer integer1 = -397;
        hashtable0.put(roomLevel0, integer1);
        roomStateServiceImpl0.setAvailableRooms(hashtable0);
        stack0.add(integer0);
        RoomPlan roomPlan0 = roomPlannerImpl0.plan(stack0);
        assertNotNull(roomPlan0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        RoomStateServiceImpl roomStateServiceImpl0 = new RoomStateServiceImpl();
        RoomPlanner roomPlannerImpl0 = getPlannerService();
        Stack<Integer> stack0 = new Stack<>();
        Integer integer0 = Level.INFO_INTEGER;
        stack0.add(0, integer0);
        Hashtable<RoomLevel, Integer> hashtable0 = new Hashtable<>();
        roomStateServiceImpl0.setAvailableRooms(hashtable0);
        RoomLevel roomLevel0 = RoomLevel.ECONOMY;
        hashtable0.put(roomLevel0, integer0);
        RoomLevel roomLevel1 = RoomLevel.PREMIUM;
        hashtable0.put(roomLevel1, integer0);
        RoomPlan roomPlan0 = roomPlannerImpl0.plan(stack0);
        assertNotNull(roomPlan0);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        RoomStateServiceImpl roomStateServiceImpl0 = new RoomStateServiceImpl();
        RoomPlanner roomPlannerImpl0 = getPlannerService();
        LinkedList<Integer> linkedList0 = new LinkedList<>();
        HashMap<RoomLevel, Integer> hashMap0 = new HashMap<>();
        RoomLevel roomLevel0 = RoomLevel.PREMIUM;
        Integer integer0 = Level.ALL_INTEGER;
        roomStateServiceImpl0.setAvailableRooms(hashMap0);
        hashMap0.put(roomLevel0, integer0);
        linkedList0.add(integer0);
        RoomPlan roomPlan0 = roomPlannerImpl0.plan(linkedList0);
        assertNotNull(roomPlan0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        RoomStateServiceImpl roomStateServiceImpl0 = new RoomStateServiceImpl();
        RoomPlanner roomPlannerImpl0 = getPlannerService();
        List<Integer> linkedList0 = Collections.emptyList();
        HashMap<RoomLevel, Integer> hashMap0 = new HashMap<>();
        RoomLevel roomLevel0 = RoomLevel.ECONOMY;
        Integer integer0 = Level.ALL_INTEGER;
        roomStateServiceImpl0.setAvailableRooms(hashMap0);
        Integer integer1 = Level.ERROR_INTEGER;
        hashMap0.put(roomLevel0, integer1);
        ArrayList<Integer> arrayList0 = new ArrayList<>(linkedList0);
        arrayList0.add(integer0);
        RoomPlan roomPlan0 = roomPlannerImpl0.plan(arrayList0);
        assertNotNull(roomPlan0);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        RoomStateServiceImpl roomStateServiceImpl0 = new RoomStateServiceImpl();
        HashMap<RoomLevel, Integer> hashMap0 = new HashMap<>();
        RoomLevel roomLevel0 = RoomLevel.PREMIUM;
        Integer integer0 = Level.ERROR_INTEGER;
        hashMap0.putIfAbsent(roomLevel0, integer0);
        roomStateServiceImpl0.setAvailableRooms(hashMap0);
        RoomPlanner roomPlannerImpl0 = getPlannerService();
        Stack<Integer> stack0 = new Stack<>();
        stack0.add(integer0);
        RoomPlan roomPlan0 = roomPlannerImpl0.plan(stack0);
        assertNotNull(roomPlan0);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        RoomStateServiceImpl roomStateServiceImpl0 = new RoomStateServiceImpl();
        HashMap<RoomLevel, Integer> hashMap0 = new HashMap<>();
        RoomLevel roomLevel0 = RoomLevel.PREMIUM;
        Integer integer0 = Level.ERROR_INTEGER;
        hashMap0.putIfAbsent(roomLevel0, integer0);
        roomStateServiceImpl0.setAvailableRooms(hashMap0);
        RoomPlanner roomPlannerImpl0 = getPlannerService();
        Stack<Integer> stack0 = new Stack<>();
        Integer integer1 = Level.ALL_INTEGER;
        stack0.add(integer1);
        RoomPlan roomPlan0 = roomPlannerImpl0.plan(stack0);
        assertNotNull(roomPlan0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        RoomPlanner roomPlannerImpl0 = getPlannerService();
        HashMap<RoomLevel, Integer> hashMap0 = new HashMap<>();
        roomPlannerImpl0.setAvailability(hashMap0);
        assertTrue(hashMap0.isEmpty());
    }
}
